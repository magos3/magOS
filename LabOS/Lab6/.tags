!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARCH	Makefile	/^ARCH     = i386-elf$/;"	m
ATTR_COLOR	boot/bootsect.S	/^ATTR_COLOR = 0x11$/;"	d
BAR_NR	include/pci.h	8;"	d
BAR_TYPE_IO	include/pci.h	11;"	d
BAR_TYPE_MEM32	include/pci.h	13;"	d
BAR_TYPE_MEM64	include/pci.h	15;"	d
BAR_TYPE_MEMLow	include/pci.h	14;"	d
BLACK	include/console.h	/^enum COLOR {BLACK=0x00, BLUE=0x01, GREEN=0x02, RED=0x04, GREY=0x08, YELLOW=0x0E, WHITE=0x0f};$/;"	e	enum:COLOR
BLUE	include/console.h	/^enum COLOR {BLACK=0x00, BLUE=0x01, GREEN=0x02, RED=0x04, GREY=0x08, YELLOW=0x0E, WHITE=0x0f};$/;"	e	enum:COLOR
BOOTSEG	include/segment.h	5;"	d
C	drivers/keyboard.c	18;"	d	file:
CC	Makefile	/^CC       = $(ARCH)-gcc$/;"	m
CLOCK_RATE	timer.c	16;"	d	file:
COLOR	include/console.h	/^enum COLOR {BLACK=0x00, BLUE=0x01, GREEN=0x02, RED=0x04, GREY=0x08, YELLOW=0x0E, WHITE=0x0f};$/;"	g
CONS_RAM_WORDS	drivers/console.c	7;"	d	file:
CTRL_PORT	timer.c	25;"	d	file:
DEBUG_PCI	drivers/pci.c	13;"	d	file:
DEBUG_TIMER	timer.c	28;"	d	file:
DEFAULT_ATTR	drivers/console.c	22;"	d	file:
DOWN_ARROW	include/console.h	5;"	d
E1000_CTRL	include/e1000.h	55;"	d
E1000_CTRL_ASDE	include/e1000.h	71;"	d
E1000_CTRL_PHY_RST	include/e1000.h	73;"	d
E1000_CTRL_RST	include/e1000.h	72;"	d
E1000_DEV_ID	include/e1000.h	46;"	d
E1000_EEC	include/e1000.h	57;"	d
E1000_EERD	include/e1000.h	58;"	d
E1000_EE_DONE	include/e1000.h	81;"	d
E1000_EE_GNT	include/e1000.h	77;"	d
E1000_EE_REQ	include/e1000.h	76;"	d
E1000_EE_START	include/e1000.h	80;"	d
E1000_H	include/e1000.h	2;"	d
E1000_IMC	include/e1000.h	60;"	d
E1000_IMS	include/e1000.h	59;"	d
E1000_IOADDR	include/e1000.h	114;"	d
E1000_IODATA	include/e1000.h	115;"	d
E1000_MAC_REG	include/e1000.h	112;"	d
E1000_RCTL	include/e1000.h	61;"	d
E1000_RCTL_BSEX	include/e1000.h	90;"	d
E1000_RCTL_BSIZE	include/e1000.h	85;"	d
E1000_RCTL_BSIZE_1K	include/e1000.h	87;"	d
E1000_RCTL_BSIZE_256B	include/e1000.h	89;"	d
E1000_RCTL_BSIZE_2K	include/e1000.h	86;"	d
E1000_RCTL_BSIZE_512B	include/e1000.h	88;"	d
E1000_STATUS	include/e1000.h	56;"	d
E1000_TCTL	include/e1000.h	62;"	d
E1000_TCTL_COLD	include/e1000.h	96;"	d
E1000_TCTL_CT	include/e1000.h	95;"	d
E1000_TCTL_EN	include/e1000.h	93;"	d
E1000_TCTL_PSP	include/e1000.h	94;"	d
E1000_TCTL_RTLC	include/e1000.h	97;"	d
E1000_TDBAH	include/e1000.h	64;"	d
E1000_TDBAL	include/e1000.h	63;"	d
E1000_TDESC_CMD_DEXT	include/e1000.h	103;"	d
E1000_TDESC_CMD_EOP	include/e1000.h	100;"	d
E1000_TDESC_CMD_IC	include/e1000.h	101;"	d
E1000_TDESC_CMD_RS	include/e1000.h	102;"	d
E1000_TDESC_STATUS_DD	include/e1000.h	106;"	d
E1000_TDESC_STATUS_EC	include/e1000.h	107;"	d
E1000_TDESC_STATUS_LC	include/e1000.h	108;"	d
E1000_TDH	include/e1000.h	66;"	d
E1000_TDLEN	include/e1000.h	65;"	d
E1000_TDT	include/e1000.h	67;"	d
E2BIG	include/errno.h	10;"	d
EACCES	include/errno.h	16;"	d
EADDRINUSE	include/errno.h	101;"	d
EADDRNOTAVAIL	include/errno.h	102;"	d
EADV	include/errno.h	71;"	d
EAFNOSUPPORT	include/errno.h	100;"	d
EAGAIN	include/errno.h	14;"	d
EALREADY	include/errno.h	117;"	d
EBADE	include/errno.h	55;"	d
EBADF	include/errno.h	12;"	d
EBADFD	include/errno.h	80;"	d
EBADMSG	include/errno.h	77;"	d
EBADR	include/errno.h	56;"	d
EBADRQC	include/errno.h	59;"	d
EBADSLT	include/errno.h	60;"	d
EBFONT	include/errno.h	62;"	d
EBUSY	include/errno.h	19;"	d
ECHILD	include/errno.h	13;"	d
ECHRNG	include/errno.h	47;"	d
ECOMM	include/errno.h	73;"	d
ECONNABORTED	include/errno.h	106;"	d
ECONNREFUSED	include/errno.h	114;"	d
ECONNRESET	include/errno.h	107;"	d
EDEADLK	include/errno.h	38;"	d
EDEADLOCK	include/errno.h	61;"	d
EDESTADDRREQ	include/errno.h	92;"	d
EDOM	include/errno.h	36;"	d
EDOTDOT	include/errno.h	76;"	d
EDQUOT	include/errno.h	125;"	d
EEXIST	include/errno.h	20;"	d
EFAULT	include/errno.h	17;"	d
EFBIG	include/errno.h	30;"	d
EHOSTDOWN	include/errno.h	115;"	d
EHOSTUNREACH	include/errno.h	116;"	d
EIDRM	include/errno.h	46;"	d
EILSEQ	include/errno.h	87;"	d
EINPROGRESS	include/errno.h	118;"	d
EINTR	include/errno.h	7;"	d
EINVAL	include/errno.h	25;"	d
EIO	include/errno.h	8;"	d
EISCONN	include/errno.h	109;"	d
EISDIR	include/errno.h	24;"	d
EISNAM	include/errno.h	123;"	d
EL2HLT	include/errno.h	54;"	d
EL2NSYNC	include/errno.h	48;"	d
EL3HLT	include/errno.h	49;"	d
EL3RST	include/errno.h	50;"	d
ELIBACC	include/errno.h	82;"	d
ELIBBAD	include/errno.h	83;"	d
ELIBEXEC	include/errno.h	86;"	d
ELIBMAX	include/errno.h	85;"	d
ELIBSCN	include/errno.h	84;"	d
ELNRNG	include/errno.h	51;"	d
ELOOP	include/errno.h	43;"	d
EMFILE	include/errno.h	27;"	d
EMLINK	include/errno.h	34;"	d
EMSGSIZE	include/errno.h	93;"	d
EMULTIHOP	include/errno.h	75;"	d
ENAMETOOLONG	include/errno.h	39;"	d
ENAVAIL	include/errno.h	122;"	d
ENETDOWN	include/errno.h	103;"	d
ENETRESET	include/errno.h	105;"	d
ENETUNREACH	include/errno.h	104;"	d
ENFILE	include/errno.h	26;"	d
ENOANO	include/errno.h	58;"	d
ENOBUFS	include/errno.h	108;"	d
ENOCSI	include/errno.h	53;"	d
ENODATA	include/errno.h	64;"	d
ENODEV	include/errno.h	22;"	d
ENOENT	include/errno.h	5;"	d
ENOEXEC	include/errno.h	11;"	d
ENOLCK	include/errno.h	40;"	d
ENOLINK	include/errno.h	70;"	d
ENOMEM	include/errno.h	15;"	d
ENOMSG	include/errno.h	45;"	d
ENONET	include/errno.h	67;"	d
ENOPKG	include/errno.h	68;"	d
ENOPROTOOPT	include/errno.h	95;"	d
ENOSPC	include/errno.h	31;"	d
ENOSR	include/errno.h	66;"	d
ENOSTR	include/errno.h	63;"	d
ENOSYS	include/errno.h	41;"	d
ENOTBLK	include/errno.h	18;"	d
ENOTCONN	include/errno.h	110;"	d
ENOTDIR	include/errno.h	23;"	d
ENOTEMPTY	include/errno.h	42;"	d
ENOTNAM	include/errno.h	121;"	d
ENOTSOCK	include/errno.h	91;"	d
ENOTTY	include/errno.h	28;"	d
ENOTUNIQ	include/errno.h	79;"	d
ENXIO	include/errno.h	9;"	d
EOPNOTSUPP	include/errno.h	98;"	d
EOVERFLOW	include/errno.h	78;"	d
EPERM	include/errno.h	4;"	d
EPFNOSUPPORT	include/errno.h	99;"	d
EPIPE	include/errno.h	35;"	d
EPROTO	include/errno.h	74;"	d
EPROTONOSUPPORT	include/errno.h	96;"	d
EPROTOTYPE	include/errno.h	94;"	d
ERANGE	include/errno.h	37;"	d
ERASE_CHAR	drivers/console.c	23;"	d	file:
EREMCHG	include/errno.h	81;"	d
EREMOTE	include/errno.h	69;"	d
EREMOTEIO	include/errno.h	124;"	d
ERESTART	include/errno.h	88;"	d
ERESTARTNOHAND	include/errno.h	130;"	d
ERESTARTNOINTR	include/errno.h	129;"	d
ERESTARTSYS	include/errno.h	128;"	d
EROFS	include/errno.h	33;"	d
ESHUTDOWN	include/errno.h	111;"	d
ESOCKTNOSUPPORT	include/errno.h	97;"	d
ESPIPE	include/errno.h	32;"	d
ESRCH	include/errno.h	6;"	d
ESRMNT	include/errno.h	72;"	d
ESTALE	include/errno.h	119;"	d
ESTRPIPE	include/errno.h	89;"	d
ETH_HDR_SIZE	include/if_ether.h	15;"	d
ETH_TYPE_8021Q	include/if_ether.h	40;"	d
ETH_TYPE_ARP	include/if_ether.h	38;"	d
ETH_TYPE_DOMAIN	include/if_ether.h	39;"	d
ETH_TYPE_IPv4	include/if_ether.h	37;"	d
ETIME	include/errno.h	65;"	d
ETIMEDOUT	include/errno.h	113;"	d
ETOOMANYREFS	include/errno.h	112;"	d
ETXTBSY	include/errno.h	29;"	d
EUCLEAN	include/errno.h	120;"	d
EUNATCH	include/errno.h	52;"	d
EUSERS	include/errno.h	90;"	d
EWOULDBLOCK	include/errno.h	44;"	d
EXDEV	include/errno.h	21;"	d
EXFULL	include/errno.h	57;"	d
FALSE	include/types.h	9;"	d
GREEN	include/console.h	/^enum COLOR {BLACK=0x00, BLUE=0x01, GREEN=0x02, RED=0x04, GREY=0x08, YELLOW=0x0E, WHITE=0x0f};$/;"	e	enum:COLOR
GREY	include/console.h	/^enum COLOR {BLACK=0x00, BLUE=0x01, GREEN=0x02, RED=0x04, GREY=0x08, YELLOW=0x0E, WHITE=0x0f};$/;"	e	enum:COLOR
HZ	timer.c	15;"	d	file:
I217_DEV_ID	include/e1000.h	47;"	d
I82577LM_DEV_ID	include/e1000.h	48;"	d
IDT_SIZE	include/idt.h	6;"	d
IF_ETHER_H	include/if_ether.h	2;"	d
INITSEG	include/segment.h	6;"	d
INTEL_VENDOR_ID	include/e1000.h	45;"	d
INTGATE	include/idt.h	9;"	d
IN_BUF_FULL	drivers/keyboard.c	32;"	d	file:
IRQ_0	pic.c	13;"	d	file:
IRQ_1	pic.c	14;"	d	file:
IRQ_10	pic.c	25;"	d	file:
IRQ_11	pic.c	26;"	d	file:
IRQ_12	pic.c	27;"	d	file:
IRQ_13	pic.c	28;"	d	file:
IRQ_14	pic.c	29;"	d	file:
IRQ_15	pic.c	30;"	d	file:
IRQ_2	pic.c	15;"	d	file:
IRQ_3	pic.c	16;"	d	file:
IRQ_4	pic.c	17;"	d	file:
IRQ_5	pic.c	18;"	d	file:
IRQ_6	pic.c	19;"	d	file:
IRQ_7	pic.c	20;"	d	file:
IRQ_8	pic.c	23;"	d	file:
IRQ_9	pic.c	24;"	d	file:
KB_CMD_REG	drivers/keyboard.c	22;"	d	file:
KB_DATA_PORT	drivers/keyboard.c	23;"	d	file:
KB_ECHO	drivers/keyboard.c	26;"	d	file:
KB_LED	drivers/keyboard.c	28;"	d	file:
KB_RESET	drivers/keyboard.c	27;"	d	file:
KB_STATUS_REG	drivers/keyboard.c	21;"	d	file:
KERNEL_CS	include/segment.h	11;"	d
KERNEL_DS	include/segment.h	12;"	d
LATCH	timer.c	18;"	d	file:
LD	Makefile	/^LD       = $(ARCH)-ld  $/;"	m
LEFT_ARROW	include/console.h	6;"	d
MAC_LEN	include/if_ether.h	13;"	d
MAGOS_STRING_H	include/string.h	2;"	d
MAGOS_TYPES_H	include/types.h	2;"	d
MAKE	Makefile	/^MAKE     = make --no-print-directory$/;"	m
MASTER	include/pic.h	4;"	d
NET_MAX_DEV	drivers/e1000.c	20;"	d	file:
NOPRINT	include/console.h	9;"	d
NR_CONS	drivers/console.c	16;"	d	file:
NULL	include/types.h	5;"	d
NULL	include/types.h	6;"	d
OBJCOPY	Makefile	/^OBJCOPY  = $(ARCH)-objcopy$/;"	m
OUT_BUF_FULL	drivers/keyboard.c	31;"	d	file:
PCI_COMMAND	include/pci.h	75;"	d
PCI_COMMAND_INTX	include/pci.h	96;"	d
PCI_COMMAND_IO	include/pci.h	93;"	d
PCI_COMMAND_MASTER	include/pci.h	95;"	d
PCI_COMMAND_MEMORY	include/pci.h	94;"	d
PCI_CONF_ADDR	drivers/pci.c	15;"	d	file:
PCI_CONF_DATA	drivers/pci.c	16;"	d	file:
PCI_CONF_REG_00	include/pci.h	74;"	d
PCI_CONF_REG_01	include/pci.h	76;"	d
PCI_CONF_REG_02	include/pci.h	77;"	d
PCI_CONF_REG_03	include/pci.h	78;"	d
PCI_CONF_REG_04	include/pci.h	79;"	d
PCI_CONF_REG_05	include/pci.h	80;"	d
PCI_CONF_REG_06	include/pci.h	81;"	d
PCI_CONF_REG_07	include/pci.h	82;"	d
PCI_CONF_REG_08	include/pci.h	83;"	d
PCI_CONF_REG_09	include/pci.h	84;"	d
PCI_CONF_REG_0A	include/pci.h	85;"	d
PCI_CONF_REG_0B	include/pci.h	86;"	d
PCI_CONF_REG_0C	include/pci.h	87;"	d
PCI_CONF_REG_0D	include/pci.h	88;"	d
PCI_CONF_REG_0E	include/pci.h	89;"	d
PCI_CONF_REG_0F	include/pci.h	90;"	d
PCI_H	include/pci.h	2;"	d
PCI_MAX_DEV	include/pci.h	6;"	d
PCI_TYPE_CARDBUS_BRIDGE	drivers/pci.c	21;"	d	file:
PCI_TYPE_DEVICE	drivers/pci.c	19;"	d	file:
PCI_TYPE_PCI_BRIDGE	drivers/pci.c	20;"	d	file:
PIC1	sys_call.S	/^PIC1  = 0x20   \/\/ master PIC  port  $/;"	d
PIC1_CMD	pic.c	32;"	d	file:
PIC1_DATA	pic.c	34;"	d	file:
PIC2	sys_call.S	/^PIC2  = 0xA0   \/\/ slave PIC  port$/;"	d
PIC2_CMD	pic.c	33;"	d	file:
PIC2_DATA	pic.c	35;"	d	file:
PIC_EOI	sys_call.S	/^PIC_EOI    = 0x20   \/\/ END Of Interrupt.  $/;"	d
RED	include/console.h	/^enum COLOR {BLACK=0x00, BLUE=0x01, GREEN=0x02, RED=0x04, GREY=0x08, YELLOW=0x0E, WHITE=0x0f};$/;"	e	enum:COLOR
REG_CURSOR	drivers/console.c	13;"	d	file:
REG_DATA	drivers/console.c	11;"	d	file:
REG_INDEX	drivers/console.c	10;"	d	file:
REG_ORIGIN	drivers/console.c	12;"	d	file:
RIGHT_ARROW	include/console.h	7;"	d
SCREEN_BG	boot/bootsect.S	/^SCREEN_BG  = 0x11 $/;"	d
SCROLL_DOWN	drivers/console.c	84;"	d	file:
SCROLL_UP	drivers/console.c	83;"	d	file:
SCR_LINES	drivers/console.c	19;"	d	file:
SCR_SIZE	drivers/console.c	20;"	d	file:
SCR_WIDTH	drivers/console.c	18;"	d	file:
SEGMENT_H	include/segment.h	2;"	d
SETUPSIZE	include/segment.h	16;"	d
SLAVE	include/pic.h	5;"	d
STACKSEG	include/segment.h	8;"	d
SYSADDR	include/segment.h	15;"	d
SYSGATE	include/idt.h	10;"	d
SYSLEN	boot/bootsect.S	/^SYSLEN   = 128           # sectors number of kernel (bootsector must not be counted). 64 KB $/;"	d
SYSSEG	include/segment.h	7;"	d
SYS_FLAG	drivers/keyboard.c	33;"	d	file:
TIMER_0	timer.c	22;"	d	file:
TIMER_1	timer.c	23;"	d	file:
TIMER_2	timer.c	24;"	d	file:
TRAPGATE	include/idt.h	8;"	d
TRUE	include/types.h	8;"	d
TX_BUF_LEN	drivers/e1000.c	31;"	d	file:
TX_RING_ZISE	drivers/e1000.c	30;"	d	file:
UP_ARROW	include/console.h	4;"	d
USER_CS	include/segment.h	13;"	d
USER_DS	include/segment.h	14;"	d
VIDEO_BASE	drivers/console.c	5;"	d	file:
VIDEO_MODE	boot/bootsect.S	/^VIDEO_MODE = 0x03        # 03h : 80x25 16 color text (CGA,EGA,MCGA,VGA)$/;"	d
VIDEO_SIZE	drivers/console.c	6;"	d	file:
WHITE	include/console.h	/^enum COLOR {BLACK=0x00, BLUE=0x01, GREEN=0x02, RED=0x04, GREY=0x08, YELLOW=0x0E, WHITE=0x0f};$/;"	e	enum:COLOR
YELLOW	include/console.h	/^enum COLOR {BLACK=0x00, BLUE=0x01, GREEN=0x02, RED=0x04, GREY=0x08, YELLOW=0x0E, WHITE=0x0f};$/;"	e	enum:COLOR
_ANSI_STDARG_H_	include/stdarg.h	32;"	d
_ASM_IO_H	include/io.h	2;"	d
_ASM_SYSTEM_H	include/system.h	2;"	d
_BSD_VA_LIST	include/stdarg.h	67;"	d
_CONSOLE_H	include/console.h	2;"	d
_CS	include/ptrace.h	19;"	d
_CS	sys_call.S	/^_CS   = 44$/;"	d
_DS	include/ptrace.h	16;"	d
_DS	sys_call.S	/^_DS   = 32$/;"	d
_EAX	include/ptrace.h	14;"	d
_EAX	sys_call.S	/^_EAX  = 24$/;"	d
_EBP	include/ptrace.h	13;"	d
_EBP	sys_call.S	/^_EBP  = 20$/;"	d
_EBX	include/ptrace.h	8;"	d
_EBX	sys_call.S	/^_EBX  = 0$/;"	d
_ECX	include/ptrace.h	9;"	d
_ECX	sys_call.S	/^_ECX  = 4$/;"	d
_EDI	include/ptrace.h	12;"	d
_EDI	sys_call.S	/^_EDI  = 16$/;"	d
_EDX	include/ptrace.h	10;"	d
_EDX	sys_call.S	/^_EDX  = 8$/;"	d
_EFLAGS	include/ptrace.h	20;"	d
_EFLAGS	sys_call.S	/^_EFLAGS  = 48$/;"	d
_EIP	include/ptrace.h	18;"	d
_EIP	sys_call.S	/^_EIP  = 40$/;"	d
_ERRNO_H	include/errno.h	2;"	d
_ERROR_CODE	include/ptrace.h	17;"	d
_ERROR_CODE	sys_call.S	/^_ERROR_CODE = 36$/;"	d
_ES	include/ptrace.h	15;"	d
_ES	sys_call.S	/^_ES   = 28$/;"	d
_ESI	include/ptrace.h	11;"	d
_ESI	sys_call.S	/^_ESI  = 12$/;"	d
_ESP	boot/head.S	/^_ESP = STACKSEG<<4 + 0x9C00      # linear addr for esp$/;"	d
_ESP	include/ptrace.h	21;"	d
_ESP	sys_call.S	/^_ESP = 52$/;"	d
_IDH_H	include/idt.h	2;"	d
_KERNEL_H	include/kernel.h	2;"	d
_KEYBOARD_H	include/keyboard.h	2;"	d
_KEY_MAP_	drivers/keyboard.c	12;"	d	file:
_KLIBC_H	include/libc.h	2;"	d
_PIC_H	include/pic.h	2;"	d
_PTRACE_H	include/ptrace.h	2;"	d
_SIZE_T	include/types.h	24;"	d
_SS	include/ptrace.h	22;"	d
_SS	sys_call.S	/^_SS  = 56$/;"	d
_STDARG_H	include/stdarg.h	31;"	d
_TIMEX_H	include/timex.h	2;"	d
_VA_LIST	include/stdarg.h	111;"	d
_VA_LIST	include/stdarg.h	63;"	d
_VA_LIST	include/stdarg.h	79;"	d
_VA_LIST_	include/stdarg.h	108;"	d
_VA_LIST_	include/stdarg.h	76;"	d
_VA_LIST_DEFINED	include/stdarg.h	114;"	d
_VA_LIST_T_H	include/stdarg.h	117;"	d
__GNUC_VA_LIST	include/stdarg.h	39;"	d
__VA_LIST	include/stdarg.h	84;"	d
__gnuc_va_list	include/stdarg.h	/^typedef __builtin_va_list __gnuc_va_list;$/;"	t
__need___va_list	include/stdarg.h	34;"	d
__va_copy	include/stdarg.h	53;"	d
__va_list__	include/stdarg.h	120;"	d
_i8042_command	drivers/keyboard.c	/^u8 _i8042_command(u16 cmd, int with_response) {$/;"	f
_i8042_out_buf_flush	drivers/keyboard.c	/^void _i8042_out_buf_flush () {$/;"	f
_i8042_read_data	drivers/keyboard.c	/^u8 _i8042_read_data () {$/;"	f
_i8042_read_polling	drivers/keyboard.c	/^u8 _i8042_read_polling ()$/;"	f
_i8042_read_status	drivers/keyboard.c	/^u8 _i8042_read_status () {$/;"	f
_i8042_write_data	drivers/keyboard.c	/^void _i8042_write_data (u8 cmd, u8 data) {$/;"	f
_idt	boot/head.S	/^_idt:$/;"	l
_idtr	boot/head.S	/^_idtr:$/;"	l
_set_gate	idt.c	/^void _set_gate (struct idt_desc *gate, u16 type, u32 addr)$/;"	f
_start	boot/bootsect.S	/^_start:$/;"	l
_start	boot/setup.S	/^_start:$/;"	l
addr	idt.c	/^   u32 addr;$/;"	m	struct:idtr_desc	file:
addr_high	include/e1000.h	/^  u32 addr_high;$/;"	m	struct:tx_desc
addr_low	include/e1000.h	/^  u32 addr_low;   \/\/ buffer address$/;"	m	struct:tx_desc
alt_gr	drivers/keyboard.c	/^int alt_gr = 0;$/;"	v
atoi	libc.c	/^int atoi(char *str)$/;"	f
attr	drivers/console.c	/^  unsigned short attr;   \/*attribute.8 low bits are zeroed*\/$/;"	m	struct:console	file:
backspace	drivers/keyboard.c	/^int backspace = 0;$/;"	v
base_addr	include/pci.h	/^  base_address_t base_addr[BAR_NR];         \/\/ base address registers$/;"	m	struct:pci_device
base_address_t	include/pci.h	/^typedef struct pci_base_address_s base_address_t; $/;"	t	typeref:struct:pci_base_address_s
bindir	Makefile	/^bindir  = ..\/bin$/;"	m
bindir	boot/Makefile	/^bindir  = ..\/..\/bin\/boot$/;"	m
bindir	drivers/Makefile	/^bindir  = ..\/..\/bin\/drivers$/;"	m
bindir	net/Makefile	/^bindir  = ..\/..\/bin\/net$/;"	m
bins	boot/Makefile	/^bins     = $(addprefix $(bindir)\/,bootsect.bin setup.bin)$/;"	m
birst	include/pci.h	/^  u8 birst;$/;"	m	struct:pci_device
blank	drivers/console.c	/^  unsigned short blank;  \/*erase character*\/$/;"	m	struct:console	file:
boot_flag	boot/bootsect.S	/^boot_flag:  $/;"	l
bus	include/pci.h	/^  u8 bus;$/;"	m	struct:pci_device
byte	include/types.h	/^typedef unsigned char byte;$/;"	t
cache_line_size	include/pci.h	/^  u8 cache_line_size,latency_timer;$/;"	m	struct:pci_device
caps	drivers/keyboard.c	/^int caps = 0;$/;"	v
class_code	include/pci.h	/^  u16 class_code;$/;"	m	struct:pci_device
class_codes_names	drivers/pci.c	/^char* class_codes_names(pci_device_t *pcidev) $/;"	f
clear_line	drivers/console.c	/^void clear_line(console_t* cons, int nr)$/;"	f
cli	include/system.h	5;"	d
cmd	include/e1000.h	/^  u8  cmd;$/;"	m	struct:tx_desc
col	drivers/console.c	/^  int col;               \/*current column*\/$/;"	m	struct:console	file:
command	include/pci.h	/^  u16 command;$/;"	m	struct:pci_device
cons_backspace	drivers/console.c	/^void cons_backspace()$/;"	f
cons_clear	drivers/console.c	/^void cons_clear(int tty)$/;"	f
cons_handler	drivers/console.c	/^void cons_handler(char (*getc)(void))$/;"	f
cons_init	drivers/console.c	/^void cons_init()$/;"	f
cons_putchar	drivers/console.c	/^void cons_putchar(register char c)$/;"	f
cons_write	drivers/console.c	/^void cons_write(char *str)$/;"	f
console	drivers/console.c	/^typedef struct console {$/;"	s	file:
console_t	drivers/console.c	/^  } console_t;$/;"	t	typeref:struct:console	file:
consoles	drivers/console.c	/^console_t consoles[NR_CONS];$/;"	v
cpu_idle	main.c	/^void cpu_idle(void)$/;"	f
crc	include/if_ether.h	/^  u32 crc;       \/\/ checksum$/;"	m	struct:ethframe
cso	include/e1000.h	/^  u8  cso;        \/\/checksum offset. where to insert TCP checksum$/;"	m	struct:tx_desc
css	include/e1000.h	/^  u8  css;$/;"	m	struct:tx_desc
ctoi	libc.c	/^int ctoi(char c)$/;"	f
curcons	drivers/console.c	/^console_t *curcons; \/*currently visible*\/$/;"	v
cursor	drivers/console.c	/^  unsigned short cursor; \/* offset in video RAM for cursor*\/$/;"	m	struct:console	file:
cursor	drivers/console.c	47;"	d	file:
cursor_pos	drivers/console.c	46;"	d	file:
debug	include/kernel.h	24;"	d
debug	include/kernel.h	30;"	d
delay	drivers/e1000.c	/^void delay(int t) {while(t--);} \/\/ bad way to make a delay$/;"	f
dev_name	include/e1000.h	/^  char *dev_name;    \/\/net device name$/;"	m	struct:net_device_struct
dev_t	include/types.h	/^typedef unsigned short dev_t; \/*dev=(major<<8 | minor)*\/$/;"	t
device	include/pci.h	/^  u8 device;$/;"	m	struct:pci_device
device_id	include/pci.h	/^  u16 device_id;$/;"	m	struct:pci_device
down_arrow	drivers/keyboard.c	/^int up_arrow = 0, down_arrow = 0, left_arrow = 0, right_arrow = 0;$/;"	v
driv_objs	Makefile	/^driv_objs = $(addprefix $(bindir)\/drivers\/, console.o keyboard.o pci.o e1000.o)$/;"	m
e1000_dev	drivers/e1000.c	/^net_device_t *e1000_dev;                 \/\/ E1000 device if existe.  $/;"	v
e1000_eeprom_exist	drivers/e1000.c	/^int e1000_eeprom_exist(net_device_t *netdev)$/;"	f
e1000_eerd_read	drivers/e1000.c	/^u32 e1000_eerd_read(net_device_t *dev, u8 addr)$/;"	f
e1000_handler	drivers/e1000.c	/^void e1000_handler()$/;"	f
e1000_probe	drivers/e1000.c	/^net_device_t* e1000_probe()$/;"	f
e1000_read_cmd	drivers/e1000.c	/^u32 e1000_read_cmd (net_device_t *netdev, u32 addr)$/;"	f
e1000_read_mac	drivers/e1000.c	/^void e1000_read_mac (net_device_t *netdev)$/;"	f
e1000_send_packet	drivers/e1000.c	/^void e1000_send_packet (ethframe_t* ethframe)$/;"	f
e1000_start	drivers/e1000.c	/^void e1000_start() $/;"	f
e1000_write_cmd	drivers/e1000.c	/^void e1000_write_cmd (net_device_t *netdev, u32 addr, u32 data)$/;"	f
eax	include/ptrace.h	/^  unsigned long eax;$/;"	m	struct:pt_regs
ebp	include/ptrace.h	/^  unsigned long ebp;$/;"	m	struct:pt_regs
ebx	include/ptrace.h	/^  unsigned long ebx;$/;"	m	struct:pt_regs
ecx	include/ptrace.h	/^  unsigned long ecx;$/;"	m	struct:pt_regs
edi	include/ptrace.h	/^  unsigned long edi;$/;"	m	struct:pt_regs
edx	include/ptrace.h	/^  unsigned long edx;$/;"	m	struct:pt_regs
eflags	include/ptrace.h	/^  unsigned long eflags;$/;"	m	struct:pt_regs
eip	include/ptrace.h	/^  unsigned long eip;$/;"	m	struct:pt_regs
end_1	boot/bootsect.S	/^  end_1:$/;"	l
enter	drivers/keyboard.c	/^int enter = 0;$/;"	v
error_code	include/ptrace.h	/^  unsigned long error_code;$/;"	m	struct:pt_regs
esi	include/ptrace.h	/^  unsigned long esi;$/;"	m	struct:pt_regs
esp	include/ptrace.h	/^  unsigned long esp;$/;"	m	struct:pt_regs
eth_type	include/if_ether.h	/^  u16 eth_type;$/;"	m	struct:ethdr
ethdr	include/if_ether.h	/^typedef struct ethdr $/;"	s
ethdr_t	include/if_ether.h	/^} __attribute((packed)) ethdr_t;$/;"	t	typeref:struct:ethdr
ether_send_packet	net/if_ether.c	/^void ether_send_packet ()$/;"	f
ethframe	include/if_ether.h	/^typedef struct ethframe$/;"	s
ethframe_t	include/if_ether.h	/^} __attribute((packed)) ethframe_t;$/;"	t	typeref:struct:ethframe
flush	drivers/console.c	/^void flush (console_t *cons)$/;"	f
fn	drivers/keyboard.c	/^int fn = 0;$/;"	v
fn_ptr	include/types.h	/^typedef int (*fn_ptr)(char *);$/;"	t
function	include/pci.h	/^  u8 function;$/;"	m	struct:pci_device
gdt	boot/setup.S	/^gdt:$/;"	l
gdtr_desc	boot/setup.S	/^gdtr_desc: $/;"	l
halt	boot/bootsect.S	/^halt:$/;"	l
halt	include/system.h	9;"	d
hdr	include/if_ether.h	/^  ethdr_t hdr;$/;"	m	struct:ethframe
header_type	include/pci.h	/^  u8 header_type;$/;"	m	struct:pci_device
header_type_name	drivers/pci.c	/^char * header_type_name(pci_device_t *pcidev) $/;"	f
idt_desc	idt.c	/^struct idt_desc {$/;"	s	file:
idt_init	idt.c	/^void idt_init()$/;"	f
idtr_desc	idt.c	/^struct idtr_desc {$/;"	s	file:
ignore_int	boot/head.S	/^ignore_int:$/;"	l
img	Makefile	/^img     = vmlabos.iso$/;"	m
in_idx	drivers/console.c	/^  int  in_idx;            \/*in index*\/$/;"	m	struct:console	file:
inb	include/io.h	21;"	d
inb_p	include/io.h	37;"	d
info	include/kernel.h	33;"	d
info2	include/kernel.h	39;"	d
init_rx	drivers/e1000.c	/^void init_rx(net_device_t *netdev)$/;"	f
init_tx	drivers/e1000.c	/^void init_tx (net_device_t *netdev)$/;"	f
inl	include/io.h	32;"	d
inqueue	drivers/console.c	/^  char inqueue[128];     \/*for cons read*\/$/;"	m	struct:console	file:
interrupt_line	include/pci.h	/^  u8 interrupt_line;     $/;"	m	struct:pci_device
interrupt_pin	include/pci.h	/^  u8 interrupt_pin;$/;"	m	struct:pci_device
inw	include/io.h	26;"	d
iobase	include/e1000.h	/^  u32  iobase;      \/\/IO base retrieved from BAR0$/;"	m	struct:net_device_struct
iobase	include/pci.h	/^  u32  iobase;      \/\/ IO base address $/;"	m	struct:pci_base_address_s
iret	include/system.h	8;"	d
irq	include/e1000.h	/^  u32  irq;$/;"	m	struct:net_device_struct
irq_0	sys_call.S	/^irq_0: \/*Timer*\/$/;"	l
irq_1	sys_call.S	/^irq_1: \/*Keyboard*\/$/;"	l
irq_11	sys_call.S	/^irq_11: \/*Ethernet*\/$/;"	l
irq_init	pic.c	/^void irq_init()$/;"	f
is_digit	include/libc.h	17;"	d
itoa	libc.c	/^int itoa( char *buf, int n, int base)$/;"	f
jiffies	timer.c	/^unsigned long jiffies = 0;$/;"	v
k	include/keyboard.h	6;"	d
kbc_i8042_init	drivers/keyboard.c	/^void kbc_i8042_init() $/;"	f
kbgetc	drivers/keyboard.c	/^char kbgetc()$/;"	f
kern_objs	Makefile	/^kern_objs = $(addprefix $(bindir)\/, boot\/head.o $(src:.c=.o) sys_call.o)$/;"	m
keyboard_handler	drivers/keyboard.c	/^void keyboard_handler()$/;"	f
keymap	include/keyboard.h	/^char keymap [] = {$/;"	v
latency_timer	include/pci.h	/^  u8 cache_line_size,latency_timer;$/;"	m	struct:pci_device
left_alt	drivers/keyboard.c	/^int left_alt = 0, right_alt = 0;$/;"	v
left_arrow	drivers/keyboard.c	/^int up_arrow = 0, down_arrow = 0, left_arrow = 0, right_arrow = 0;$/;"	v
left_ctrl	drivers/keyboard.c	/^int left_ctrl = 0, right_ctrl = 0;$/;"	v
left_shift	drivers/keyboard.c	/^int left_shift = 0, right_shift = 0;$/;"	v
length	include/e1000.h	/^  u16 length;    \/\/ buffer length. 16KB by default $/;"	m	struct:tx_desc
limit	drivers/console.c	/^  long limit;            \/* limit of this console's video memory *\/$/;"	m	struct:console	file:
limit	idt.c	/^   u16 limit;$/;"	m	struct:idtr_desc	file:
load_kernel	boot/bootsect.S	/^load_kernel:$/;"	l
mac	include/e1000.h	/^  u8   mac[6];      \/\/MAC address $/;"	m	struct:net_device_struct
mac_dest	include/if_ether.h	/^  u8 mac_dest[MAC_LEN];$/;"	m	struct:ethdr
mac_src	include/if_ether.h	/^  u8 mac_src[MAC_LEN];$/;"	m	struct:ethdr
max_latency	include/pci.h	/^  u8 max_latency;$/;"	m	struct:pci_device
membase	include/e1000.h	/^  u32  membase;     \/\/Memory base from BAR2$/;"	m	struct:net_device_struct
membase	include/pci.h	/^  u32  membase;     \/\/ Memory base address$/;"	m	struct:pci_base_address_s
memcpy	libc.c	/^char * memcpy(char *src, char *dst, int len)$/;"	f
memset	libc.c	/^void memset(char *adr, char val, int len)$/;"	f
memsetd	libc.c	/^void memsetd(long *adr, long val, int len)$/;"	f
memsetw	libc.c	/^void memsetw(short *adr, short val, int len)$/;"	f
min_grant	include/pci.h	/^  u8 min_grant;$/;"	m	struct:pci_device
move_bsect	boot/bootsect.S	/^move_bsect:$/;"	l
move_cursor_arrow	drivers/console.c	/^void move_cursor_arrow(int arrow)$/;"	f
net_dev_nr	drivers/e1000.c	/^int  net_dev_nr = 0;                     \/\/ number of net devices$/;"	v
net_device_struct	include/e1000.h	/^struct net_device_struct $/;"	s
net_device_t	include/e1000.h	/^typedef struct net_device_struct net_device_t;$/;"	t	typeref:struct:net_device_struct
net_devices	drivers/e1000.c	/^net_device_t net_devices[NET_MAX_DEV];   \/\/ all registered net devices are here$/;"	v
net_objs	Makefile	/^net_objs  = $(addprefix $(bindir)\/net\/, if_ether.o)$/;"	m
net_print_info	drivers/e1000.c	/^void net_print_info (net_device_t *netdev)$/;"	f
next	boot/bootsect.S	/^   next:$/;"	l
nop	include/system.h	7;"	d
null	include/types.h	4;"	d
objs	drivers/Makefile	/^objs    = $(addprefix $(bindir)\/,$(src:.c=.o))$/;"	m
objs	net/Makefile	/^objs    = $(addprefix $(bindir)\/,$(src:.c=.o))$/;"	m
offset_hi	idt.c	/^   u16 offset_hi;$/;"	m	struct:idt_desc	file:
offset_lo	idt.c	/^   u16 offset_lo;$/;"	m	struct:idt_desc	file:
origin	drivers/console.c	/^  long origin;           \/* offset in RAM(0xb8000) where GD5446 base points *\/$/;"	m	struct:console	file:
outb	include/io.h	6;"	d
outb_p	include/io.h	16;"	d
outl	include/io.h	12;"	d
outw	include/io.h	9;"	d
page_down	drivers/keyboard.c	/^int page_up = 0, page_down = 0;$/;"	v
page_up	drivers/keyboard.c	/^int page_up = 0, page_down = 0;$/;"	v
panic	include/kernel.h	16;"	d
payload	include/if_ether.h	/^  u8 *payload;$/;"	m	struct:ethframe
payload_len	include/if_ether.h	/^  u32 payload_len;$/;"	m	struct:ethframe
pci_base_address_s	include/pci.h	/^struct pci_base_address_s$/;"	s
pci_conf_read16	drivers/pci.c	/^u16 pci_conf_read16 (pci_device_t* pcidev, int offset)$/;"	f
pci_conf_read32	drivers/pci.c	/^u32 pci_conf_read32 (pci_device_t* pcidev, int offset)$/;"	f
pci_conf_read32_long	drivers/pci.c	/^u32 pci_conf_read32_long(int bus, int device, int func, int offset) $/;"	f
pci_conf_write16	drivers/pci.c	/^void pci_conf_write16(pci_device_t* pcidev, int offset, u16 data) $/;"	f
pci_conf_write32	drivers/pci.c	/^void pci_conf_write32(pci_device_t* pcidev, int offset, u32 data) $/;"	f
pci_dev_nr	drivers/pci.c	/^int  pci_dev_nr = 0;                     \/\/ number of pci devices$/;"	v
pci_device	include/pci.h	/^struct pci_device$/;"	s
pci_device_t	include/pci.h	/^typedef struct pci_device pci_device_t;$/;"	t	typeref:struct:pci_device
pci_devices	drivers/pci.c	/^pci_device_t pci_devices[PCI_MAX_DEV];   \/\/ devices connected on the PCI bus$/;"	v
pci_print_info	drivers/pci.c	/^void pci_print_info (pci_device_t *pcidev) $/;"	f
pci_probe_devices	drivers/pci.c	/^void pci_probe_devices() $/;"	f
pcidev	include/e1000.h	/^  pci_device_t *pcidev;$/;"	m	struct:net_device_struct
pic_8259a_init	pic.c	/^void pic_8259a_init()$/;"	f
pid_t	include/types.h	/^typedef int pid_t;$/;"	t
pit_8253_init	timer.c	/^void pit_8253_init(void)$/;"	f
popl	sys_call.S	/^   popl ds$/;"	d
pos	drivers/console.c	45;"	d	file:
prev_code	drivers/keyboard.c	/^unsigned char prev_code = 0; \/*treat E0 keys*\/$/;"	v
print_mac	drivers/e1000.c	/^void print_mac(net_device_t *netdev)$/;"	f
print_msg	boot/bootsect.S	/^print_msg:$/;"	l
printk	printk.c	/^void printk(const char * format,...)$/;"	f
prog_if	include/pci.h	/^  u8 prog_if;$/;"	m	struct:pci_device
pt_regs	include/ptrace.h	/^struct pt_regs {$/;"	s
pushl	sys_call.S	/^   pushl ds$/;"	d
ramqueue	drivers/console.c	/^  unsigned short ramqueue[CONS_RAM_WORDS]; \/* buffer for video RAM *\/$/;"	m	struct:console	file:
revision_id	include/pci.h	/^  u8 revision_id;$/;"	m	struct:pci_device
right_alt	drivers/keyboard.c	/^int left_alt = 0, right_alt = 0;$/;"	v
right_arrow	drivers/keyboard.c	/^int up_arrow = 0, down_arrow = 0, left_arrow = 0, right_arrow = 0;$/;"	v
right_ctrl	drivers/keyboard.c	/^int left_ctrl = 0, right_ctrl = 0;$/;"	v
right_shift	drivers/keyboard.c	/^int left_shift = 0, right_shift = 0;$/;"	v
row	drivers/console.c	/^  int row;               \/*current line*\/$/;"	m	struct:console	file:
rsv	include/e1000.h	/^  u8  rsv;$/;"	m	struct:tx_desc
save_meminfo	boot/setup.S	/^save_meminfo:$/;"	l
scroll	drivers/console.c	/^void scroll(console_t *cons, int direction)$/;"	f
selector	idt.c	/^   u16 selector;$/;"	m	struct:idt_desc	file:
set_gd5446	drivers/console.c	/^void set_gd5446(unsigned int  value, int reg)$/;"	f
set_intr_gate	idt.c	/^void set_intr_gate(u16 n, u32 addr)$/;"	f
set_system_gate	idt.c	/^void set_system_gate(u16 n, u32 addr)$/;"	f
set_trap_gate	idt.c	/^void set_trap_gate(u16 n, u32 addr)$/;"	f
setup_end	boot/setup.S	/^setup_end:$/;"	l
sh_keymap	include/keyboard.h	/^char sh_keymap [] = {$/;"	v
show_cursor	drivers/console.c	/^void show_cursor()$/;"	f
size	drivers/console.c	/^  int  size;             \/* size of video memory *\/$/;"	m	struct:console	file:
size_t	include/types.h	/^typedef unsigned int size_t;$/;"	t
space_type	include/e1000.h	/^  u8   space_type;$/;"	m	struct:net_device_struct
space_type	include/pci.h	/^  u8   space_type;  \/\/ base address : IO or Mem$/;"	m	struct:pci_base_address_s
special	include/e1000.h	/^  u16 special;$/;"	m	struct:tx_desc
src	Makefile	/^src     = $(wildcard *.c)$/;"	m
src	drivers/Makefile	/^src     = $(wildcard *.c)$/;"	m
src	net/Makefile	/^src     = $(wildcard *.c)$/;"	m
start	drivers/console.c	/^  long start;            \/* start of video memory of this console *\/$/;"	m	struct:console	file:
start_kernel	main.c	/^void start_kernel () {$/;"	f
startup_32	boot/head.S	/^startup_32:$/;"	l
status	include/e1000.h	/^  u8  status;$/;"	m	struct:tx_desc
status	include/pci.h	/^  u16 status;$/;"	m	struct:pci_device
sti	include/system.h	6;"	d
strcat	include/string.h	/^static inline  char * strcat(char *s1, char *s2)$/;"	f
strcmp	include/string.h	/^static inline  int strcmp (char* s1, char* s2)$/;"	f
strcpy	include/string.h	/^static inline  char *  strcpy(const char * src, char *dst)$/;"	f
strlen	include/string.h	/^static inline  int strlen(char *s)$/;"	f
strncmp	include/string.h	/^static inline  int strncmp (char* s1, char* s2, size_t len)$/;"	f
strncpy	include/string.h	/^static inline  char *  strncpy(const char *src, char *dst, int count)$/;"	f
subclass	include/pci.h	/^  u16 subclass;$/;"	m	struct:pci_device
subdirs	Makefile	/^subdirs  = boot drivers net$/;"	m
subsys_id	include/pci.h	/^  u16 subsys_id;$/;"	m	struct:pci_device
subsys_vendor_id	include/pci.h	/^  u16 subsys_vendor_id;$/;"	m	struct:pci_device
tab_size	vsprintf.c	/^int tab_size = 4; \/*4 spaces*\/$/;"	v
timer_handler	timer.c	/^void timer_handler(unsigned long esp)$/;"	f
tx_buf	drivers/e1000.c	/^tx_buf_t  tx_buf[TX_RING_ZISE]  __attribute__ ((aligned (4))); $/;"	v
tx_buf_t	drivers/e1000.c	/^typedef  u8 tx_buf_t[TX_BUF_LEN];   $/;"	t	file:
tx_desc	include/e1000.h	/^struct tx_desc$/;"	s
tx_desc_t	include/e1000.h	/^typedef struct tx_desc tx_desc_t;$/;"	t	typeref:struct:tx_desc
tx_ring	drivers/e1000.c	/^tx_desc_t tx_ring[TX_RING_ZISE] __attribute__ ((aligned (16)));   $/;"	v
type	idt.c	/^   u16 type;$/;"	m	struct:idt_desc	file:
u16	include/types.h	/^typedef unsigned short u16;$/;"	t
u32	include/types.h	/^typedef unsigned int u32;$/;"	t
u8	include/types.h	/^typedef unsigned char u8;$/;"	t
up_arrow	drivers/keyboard.c	/^int up_arrow = 0, down_arrow = 0, left_arrow = 0, right_arrow = 0;$/;"	v
update_cursor	drivers/console.c	/^void update_cursor(console_t *cons)$/;"	f
utoa	libc.c	/^int utoa( char *buf, unsigned long n, int base)$/;"	f
v_error_loading	boot/bootsect.S	/^v_error_loading:$/;"	l
v_loading	boot/bootsect.S	/^v_loading:$/;"	l
v_ok	boot/bootsect.S	/^v_ok:$/;"	l
va_arg	include/stdarg.h	49;"	d
va_copy	include/stdarg.h	51;"	d
va_end	include/stdarg.h	48;"	d
va_list	include/stdarg.h	/^typedef __gnuc_va_list va_list;$/;"	t
va_start	include/stdarg.h	47;"	d
vendor_id	include/pci.h	/^  u16 vendor_id;$/;"	m	struct:pci_device
vendor_name	include/e1000.h	/^  char *vendor_name; \/\/vendor name $/;"	m	struct:net_device_struct
vsprintf	vsprintf.c	/^int vsprintf (char *buf, const char * format, va_list args )$/;"	f
warn	include/kernel.h	10;"	d
while_1	boot/bootsect.S	/^  while_1: $/;"	l
xcs	include/ptrace.h	/^  unsigned long xcs;$/;"	m	struct:pt_regs
xds	include/ptrace.h	/^  unsigned long xds;$/;"	m	struct:pt_regs
xes	include/ptrace.h	/^  unsigned long xes; \/*x:16 high bits are unused*\/$/;"	m	struct:pt_regs
xss	include/ptrace.h	/^  unsigned long xss;$/;"	m	struct:pt_regs
zero_mem	include/system.h	11;"	d
